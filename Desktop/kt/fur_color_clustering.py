# -*- coding: utf-8 -*-
"""fur_color_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SMeAwd5aTD526o6t4Wg6FNuL_aQnhl3V
"""


import os #chdir 사용시 필요함
import glob #파일 경로
import cv2


# 잘 나온 이미지만을 가져오기 위해서 크롤러 대신 수작업을 선택해야 할지도 모르겠습니다.

#1. 클러스터링 (rgb)

import cv2 # 색상감지를 위한 opencv활용

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans


def centroid_histogram(clt):
    # grab the number of different clusters and create a histogram
    # based on the number of pixels assigned to each cluster
    numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)
    (hist, _) = np.histogram(clt.labels_, bins=numLabels)

    # normalize the histogram, such that it sums to one
    hist = hist.astype("float")
    hist /= hist.sum()

    # return the histogram
    return hist
    
def plot_colors(hist, centroids):
    # initialize the bar chart representing the relative frequency
    # of each of the colors
    bar = np.zeros((50, 300, 3), dtype="uint8")
    startX = 0

    # loop over the percentage of each cluster and the color of
    # each cluster
    for (percent, color) in zip(hist, centroids):
        # plot the relative percentage of each cluster
        endX = startX + (percent * 300)
        cv2.rectangle(bar, (int(startX), 0), (int(endX), 50),
                      color.astype("uint8").tolist(), -1)
        startX = endX

    # return the bar chart
    return bar


def image_color_cluster(image_path, k = 5):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = image.reshape((image.shape[0] * image.shape[1], 3))
    
    clt = KMeans(n_clusters = k)
    clt.fit(image)

    hist = centroid_histogram(clt)
    bar = plot_colors(hist, clt.cluster_centers_[1:])

    print("hist",hist,"\n" "clu",clt.cluster_centers_[1:])
    
    plt.figure()
    plt.axis("off")
    plt.imshow(bar)
    plt.show()


for i in range(1,81):
  images='./change/'+f'abandoned{i}'+'.jpg'
  print(i)
  image = mpimg.imread(images)
  plt.imshow(image)
  image_color_cluster(images)